// ProcessFactory.js - Pure factory for creating process objects from emotion data

export class ProcessFactory {
    /**
     * Create a process object from emotion data
     * This is a pure function with no side effects - only creates and returns the process object
     * @param {string} processId - The unique process ID (generated by ProcessManager)
     * @param {Object} emotionData - The emotion data to create process from
     * @param {string} priority - Process priority ('normal', 'high', 'low', 'auto')
     * @returns {Object} The created process object
     */
    createProcess(processId, emotionData, priority = 'normal') {
        const process = this.generateProcessFromEmotion(emotionData, processId, priority);
        return process;
    }

    /**
     * Generate realistic process from emotion data
     * Moved from ProcessManager - creates process object based on emotion type and intensity
     * @param {Object} emotion - Emotion data with type and intensity
     * @param {string} processId - Unique process identifier
     * @param {string} priority - Process priority
     * @returns {Object} Complete process object
     */
    generateProcessFromEmotion(emotion, processId, priority) {
        const processTemplates = {
            grief: {
                name: 'grief_processor',
                type: 'emotional_processing',
                baseMemoryUsage: 150 + (emotion.intensity * 100),
                baseCpuUsage: 30 + (emotion.intensity * 40),
                threadCount: Math.ceil(emotion.intensity * 3),
                priority: 'high',
                vulnerabilities: ['memory_leak', 'infinite_loop', 'stack_overflow'],
                behaviors: ['memory_accumulation', 'recursive_thinking', 'resource_hoarding']
            },
            anxiety: {
                name: 'threat_scanner',
                type: 'background_monitoring',
                baseMemoryUsage: 80 + (emotion.intensity * 60),
                baseCpuUsage: 25 + (emotion.intensity * 30),
                threadCount: Math.ceil(emotion.intensity * 2),
                priority: 'high',
                vulnerabilities: ['false_positive_cascade', 'hypervigilance_loop'],
                behaviors: ['continuous_scanning', 'alert_amplification']
            },
            anger: {
                name: 'conflict_resolver',
                type: 'reactive_processing',
                baseMemoryUsage: 100 + (emotion.intensity * 80),
                baseCpuUsage: 40 + (emotion.intensity * 35),
                threadCount: Math.ceil(emotion.intensity * 2.5),
                priority: 'high',
                vulnerabilities: ['interrupt_storm', 'priority_inversion'],
                behaviors: ['aggressive_scheduling', 'resource_competition']
            },
            joy: {
                name: 'reward_amplifier',
                type: 'enhancement_processing',
                baseMemoryUsage: 60 + (emotion.intensity * 40),
                baseCpuUsage: 20 + (emotion.intensity * 15),
                threadCount: Math.ceil(emotion.intensity * 1.5),
                priority: 'normal',
                vulnerabilities: ['dopamine_overflow', 'attention_fragmentation'],
                behaviors: ['resource_sharing', 'positive_feedback']
            }
        };

        const template = processTemplates[emotion.type] || processTemplates.anxiety;
        
        const process = {
            id: processId,
            name: template.name,
            type: template.type,
            status: 'running',
            priority: priority === 'auto' ? template.priority : priority,
            
            // Resource usage with variation
            memoryUsage: template.baseMemoryUsage + (Math.random() * 20 - 10),
            cpuUsage: template.baseCpuUsage + (Math.random() * 10 - 5),
            threadCount: template.threadCount,
            
            // Lifecycle
            lifetime: 0,
            lastActivity: Date.now(),
            crashCount: 0,
            
            // Emotional context
            emotionSource: emotion,
            emotionalImpact: emotion.intensity,
            
            // Debug information
            debuggable: true,
            currentIssues: [],
            interventionPoints: this.generateInterventionPoints(template),
            
            // Performance
            effectivenessScore: 0.8 + (Math.random() * 0.4),
            optimizationLevel: 0,
            
            // Vulnerabilities
            vulnerabilities: template.vulnerabilities,
            behaviors: template.behaviors
        };

        // Generate initial issues based on emotion intensity and vulnerabilities
        if (emotion.intensity > 0.7) {
            const vulnerability = template.vulnerabilities[Math.floor(Math.random() * template.vulnerabilities.length)];
            process.currentIssues.push({
                type: vulnerability,
                severity: emotion.intensity > 0.9 ? 'critical' : 'high',
                description: `${vulnerability.replace('_', ' ')} detected in emotional processing`,
                timestamp: Date.now()
            });
        }

        return process;
    }

    /**
     * Generate intervention points for debugging
     * Moved from ProcessManager - creates debugging intervention points based on process type
     * @param {Object} template - Process template with type information
     * @returns {Array} Array of intervention point strings
     */
    generateInterventionPoints(template) {
        const interventionMap = {
            'emotional_processing': ['memory_cleanup', 'process_throttling', 'recursive_depth_limit'],
            'background_monitoring': ['alert_filtering', 'scan_optimization', 'false_positive_reduction'],
            'reactive_processing': ['anger_diffusion', 'priority_rebalancing', 'interrupt_management'],
            'enhancement_processing': ['reward_modulation', 'attention_focusing', 'feedback_stabilization']
        };

        return interventionMap[template.type] || ['generic_optimization', 'resource_management'];
    }
}

export default ProcessFactory;
